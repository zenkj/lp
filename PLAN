-1. erlang吐槽
    erlang很让人困惑的一个问题是，apply(M,F,A)和start_link中往init传的
    参数的传递方式不一样。前者F的arity取决于A数组的长度，后者init的参数
    只有一个。不过这个可能不是问题，因为前者的F就在A前面，没有预先定义，
    而init是一个回调函数，参数个数是写死的。这个是erlang的函数arity
    是确定的这一点限制的。
    另外一个让人吐槽的地方是，A=5时，<<5>>和<<A>>都是对的，
    A="123"时，<<"123">>是对的，而<<A>>的写法是错的，<<>>中间必须放常量字符串
    erlang没有命令行的调试器，调试特别难受。应该集成到gdb中。
    erlang中变量不可变导致名字太多，起名字困难，名字太难看难懂（缩写太多）
    erlang中不支持循环，循环都要用fold/map/列表解析等实现，不够直观
    

 0. 语言名字
    lp:
    Language for People(not for compiler or interpreter)
    Language for Parallel
    Literate Programming
    Lightweight Process
    Lao Po
    Lai Pi
    Lua-inspired Programming language
    Liberal Programming
 1. 特性
    可抢占式调度的轻量级线程（来自erlang）
        lp puts "new process with id = $$" end
        lp类似go语言中的go关键字，但不是后跟函数调用，而是直接跟
        代码块。这样无需定义函数即可创建lp，更加容易一些。
    数据不可变（来自FP）
        减少大量锁，适合并发编程
        对于map这类数据结构，每次修改都会造成大量重复数据（测试性能）
    词法级命名作用域（来自C）
    同一作用域中，名字可以重绑定（来自lua） -- 慎重
        减少了创建大量名字（X，X1，X2）的场景
        但会出现同一个名字在相同作用域的不同地方所指代的数据不一致的问题
        note: for/while循环中向其所在作用域返回数据的同名替换，不属于
        统一作用域的名字重绑定，因为他们是在不同作用域。
        if算不算子作用域？算
    支持类似block的结构，减少括号内的函数定义（来自ruby）
    面向人组织程序，而非面向编译器／解释器组织程序（来自CWEB）
        写程序好比写文章
        不再有设计／开发／测试／资料之分
    for/while循环可以传入参数，可以有返回值
        实际上就是将erlang中必须通过定义一个新的递归函数来解决的问题，
        使用for/while循环直接在当前函数中写出来。
        erlang的那种做法极不合理：
            为什么一个简单的循环非要定义一个和当前函数同等地位的函数？
            为什么非要占用一个和当前函数相同命名空间的名字？
            
        for/while返回值规则：
            从返回的作用域开始，依次往上找for／while语句定义的同名变量
            如果有，则覆盖；没有，则啥都不做。
        for n in 1..10; a=0; b=0 do
            plah plah plah
            a += n
            b += a
        end

        for n in 1..10
            a = 0
            b = 0
        do
            plah plah plah
            a += n
            b += a
        end

        for
            n in 1,10,13,16,18
            a = 0
            b = 0
        do
            plah plah plah
            a += n
            b += a
        end

        for
            n,i in 1..10
            a = 0
            b = 0
        do
            plah plah plah
            a += n
            b += a + i
        end

        for
            n in 1..10..2
            m in 1..n
            n != 5     # for中的逻辑判断是filter，false时进入下一轮循环
            m + n < 11
            a = 0
            b = 0
        do
            plah plah plah
            a += n
            b += a
        end

        for n in 1..10
            m in n..10
        do
            print "n = $n, m = $m"
        end

        for n in 1..10
            m in 2*n       # or m = 2*n???
        do
            print "n = $n, m = $m"
        end


        for a,b,c in iterator(); d = 0 do
            plah plah plah
            if d > 25 then
                break
            end
            if d > 20 then
                continue
            end
            d + a+b+c
        end

        while
            line in  readline()
            a    =  0
            line != eof ＃while中的逻辑判断是guard，false时跳出循环
        do
            plah plah plah
            a += length(line)
        end

        print a

        do
            print 'this is a local do scope'
        end

        if
            a = 0
            b = 0
            i > 24
        then
            plah plah plah
            a += i
            b += a
        end

        print a

        lp
            print 'this is in a sub light process'
        end

    模式匹配
        case receive(10) of
        timeout:
            print 'timeout'
        1|2|3,4:
            print '1 or 2 or 3 and 4'
        _:
            print 'catch all'
        end

        case receive(10) of
            timeout:
                print 'timeout'
            1|2|3,4:
                print '1 or 2 or 3 and 4'
            _:
                print 'catch all'
        end

        case receive(10) of
            timeout: print 'timeout'
            1|2|3,4: print '1 or 2 or 3 and 4'
            _:       print 'catch all'
        end

        case a of 24 | 36: print '24 or 36' end
        
        if a == 24 || a == 36 then print '24 or 36' end
        
        for result in receive(10) do
            case result of
                .timeout: break
                1:        plah plah
                _,23,_:   tuple with 3 elements plah plah
            end
            if result == 24 then break end
        end

    原子
        .abc
    使用Closure集合代替对象 -- 不好理解
        对象实例不再是一堆数据的组合（含有一个指向方法列表的指针）
        而是一堆Closure的集合，这堆Closure共享相同的upvalue，这些隐藏
        的upvalue才是对象实例的数据，但任何人都无法看到
        upvalue和函数参数相比，耗费更多还是更少？比如与使用this指针的情况相比
        {.a = foo, .b = bar}
        or
        export fun foo() ... end
        export fun bar() ... end
    tuple
        tuple在表达1～3个数据时非常方便，免去了起名字的烦恼，同时通过
        下标的快速访问方式，性能极高
        但多于三个数据放一起，tuple使用下标定位的方式对人来说很不方便，人对于
        多于三个的数据，更喜欢通过名字去叫，而非老四／老五／老六这样去叫。

        函数参数实际上就是一种tuple，通过参数位置将形参和实参对应起来。
        访问非常快，但同样，多于三个参数后，调用函数就很难记怎么调用。

        所以，tuple只能有最多三个数据；多于三个，就必须使用命名访问。
        并且，tuple只能是临时性的，不能用作export的函数的参数、返回值，
        因为这样无法理解。

    列表解析
        [a+b for a in 1..10; b in a..12; a+b != 6] # generator or filter

    命名空间组织
        目录作为包，文件作为模块，大写开头作为类型，消息开头作为变量、函数
    
    文件中名字组织
        erlang、c、javascript等很大的问题是没有把主要函数（export的）和一般的辅助函数（trivial的）
        分开，整个文件没有结构，导致文件长的时候看起来很痛苦
        而小说，则分章节，有清晰入口，很清楚。
        所以，有如下创建section，使用local名字的想法

    字符串：
        "aaa"是可做字符串解析的字符串，可以将变量插入其中："aaa$b-aaa"，变量b会被解析出来
        'aaa'是不做字符串解析的字符串
        """aaa"""是做字符串解析的多行字符串
        '''aaa'''是不做字符串解析的多行字符串
        在section、function、variable、parameter等后面直接跟着的字符串，是该成员的说明。

    正则表达式
        r'xxxx'
        r"xxxx" 都是正则表达式，后者可以使用$变量。之所以不使用/xxxx/, 是因为/与除号相同，不好使用

    注释
        #! 首行指定解析程序
        #  注释开始
        #""" 多行注释开始
        """ 多行注释结束 
        #''' 多行注释开始
        ''' 多行注释结束 

    段section
        @1
        @9 指定程序结构的级别
        @> 下一级
        @< 上一级
        @= 当前级别的下一条目
        @1-9, @>, @<, @=会创建一个新的section，在section内部，local名字可与其他section的名字重复
        新section后所跟第一个token如果是字符串，则为该section的说明

    local名字
        local名字是section内部的名字，在外部不可见

    try catch after finally
        try中添加类似erlang receive中的after，可以监控任意一段代码的执行时间

    自动添加分号
        参考go语言的添加规则


 2. 语法定义
 3. 虚拟机指令定义
 4. 词法解析器
 5. 语法解析器
 6. 虚拟机指令生成器
 7. 虚拟机执行器
 8. IDE
 9. io集成
    network
    terminal
    disk
10. webserver开发

